//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MobileInput"",
            ""id"": ""73d6267d-17e6-40d7-9b30-c631eee0c631"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""9dfc2b9a-080e-4f71-a306-f5189c4483ae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragStarted"",
                    ""type"": ""Button"",
                    ""id"": ""cc58d600-d03d-4964-bbc4-3f9aab040b47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e8f999f-2eab-49eb-99e8-a626c3f65cec"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acb63572-b426-4464-bec1-e3abcd8e1dff"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragStarted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PcInput"",
            ""id"": ""ad5365fb-09b4-4040-93e3-b4f70b036159"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9ef93447-ac30-4b85-9ac0-22d68855b65d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""0b837992-1130-48fe-b747-04ad7b0c847e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""c202c19a-7454-4526-99fd-0741b381d1c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""5a5530c7-03fc-4eeb-9b7c-28eaf572cc41"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""a348cab9-caff-4f6c-9699-d78adf581237"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""013b319a-6a32-48ff-875c-c8e25ddf48db"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""96837e86-4943-48cf-87d6-305191b35eb4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""51bc3e23-84ec-4918-9971-1ad0704c7063"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad368d4a-f7ef-494c-871c-5e1f1e383153"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e27df93c-936b-4e81-83cf-40e62d216429"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d041299c-ba6e-4eee-9703-3dcdcea9aee8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""108ac9ce-d3b1-46ff-9f05-d46d37c9523d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0334280c-da43-467f-8810-d894a21d6442"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0562f3f7-7ddb-48de-b804-8174e0dc37f9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MobileInput
        m_MobileInput = asset.FindActionMap("MobileInput", throwIfNotFound: true);
        m_MobileInput_TouchPosition = m_MobileInput.FindAction("TouchPosition", throwIfNotFound: true);
        m_MobileInput_DragStarted = m_MobileInput.FindAction("DragStarted", throwIfNotFound: true);
        // PcInput
        m_PcInput = asset.FindActionMap("PcInput", throwIfNotFound: true);
        m_PcInput_Move = m_PcInput.FindAction("Move", throwIfNotFound: true);
        m_PcInput_Dash = m_PcInput.FindAction("Dash", throwIfNotFound: true);
        m_PcInput_Shoot = m_PcInput.FindAction("Shoot", throwIfNotFound: true);
        m_PcInput_MousePos = m_PcInput.FindAction("MousePos", throwIfNotFound: true);
        m_PcInput_Reload = m_PcInput.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MobileInput
    private readonly InputActionMap m_MobileInput;
    private List<IMobileInputActions> m_MobileInputActionsCallbackInterfaces = new List<IMobileInputActions>();
    private readonly InputAction m_MobileInput_TouchPosition;
    private readonly InputAction m_MobileInput_DragStarted;
    public struct MobileInputActions
    {
        private @InputActions m_Wrapper;
        public MobileInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_MobileInput_TouchPosition;
        public InputAction @DragStarted => m_Wrapper.m_MobileInput_DragStarted;
        public InputActionMap Get() { return m_Wrapper.m_MobileInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileInputActions set) { return set.Get(); }
        public void AddCallbacks(IMobileInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileInputActionsCallbackInterfaces.Add(instance);
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @DragStarted.started += instance.OnDragStarted;
            @DragStarted.performed += instance.OnDragStarted;
            @DragStarted.canceled += instance.OnDragStarted;
        }

        private void UnregisterCallbacks(IMobileInputActions instance)
        {
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @DragStarted.started -= instance.OnDragStarted;
            @DragStarted.performed -= instance.OnDragStarted;
            @DragStarted.canceled -= instance.OnDragStarted;
        }

        public void RemoveCallbacks(IMobileInputActions instance)
        {
            if (m_Wrapper.m_MobileInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileInputActions @MobileInput => new MobileInputActions(this);

    // PcInput
    private readonly InputActionMap m_PcInput;
    private List<IPcInputActions> m_PcInputActionsCallbackInterfaces = new List<IPcInputActions>();
    private readonly InputAction m_PcInput_Move;
    private readonly InputAction m_PcInput_Dash;
    private readonly InputAction m_PcInput_Shoot;
    private readonly InputAction m_PcInput_MousePos;
    private readonly InputAction m_PcInput_Reload;
    public struct PcInputActions
    {
        private @InputActions m_Wrapper;
        public PcInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PcInput_Move;
        public InputAction @Dash => m_Wrapper.m_PcInput_Dash;
        public InputAction @Shoot => m_Wrapper.m_PcInput_Shoot;
        public InputAction @MousePos => m_Wrapper.m_PcInput_MousePos;
        public InputAction @Reload => m_Wrapper.m_PcInput_Reload;
        public InputActionMap Get() { return m_Wrapper.m_PcInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PcInputActions set) { return set.Get(); }
        public void AddCallbacks(IPcInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PcInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PcInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IPcInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IPcInputActions instance)
        {
            if (m_Wrapper.m_PcInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPcInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PcInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PcInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PcInputActions @PcInput => new PcInputActions(this);
    public interface IMobileInputActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnDragStarted(InputAction.CallbackContext context);
    }
    public interface IPcInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
