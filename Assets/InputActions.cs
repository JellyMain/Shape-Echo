//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MobileInput"",
            ""id"": ""73d6267d-17e6-40d7-9b30-c631eee0c631"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""9dfc2b9a-080e-4f71-a306-f5189c4483ae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragStarted"",
                    ""type"": ""Button"",
                    ""id"": ""cc58d600-d03d-4964-bbc4-3f9aab040b47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e8f999f-2eab-49eb-99e8-a626c3f65cec"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acb63572-b426-4464-bec1-e3abcd8e1dff"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragStarted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PcInput"",
            ""id"": ""ad5365fb-09b4-4040-93e3-b4f70b036159"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""01694a6c-604a-49bb-9d67-0e70952dbdd7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragStarted"",
                    ""type"": ""Button"",
                    ""id"": ""80256e1c-efc0-48a5-a761-d928fbb3cccf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""fa756605-4c5b-4a0b-aa90-c738ab225115"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4db8b24c-98b5-49cf-8fb1-d52e537c99e7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9fabc8c-94ad-490d-ab2f-201da41d1721"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragStarted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8967a709-e08f-4628-b18a-a5e7e41dd987"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MobileInput
        m_MobileInput = asset.FindActionMap("MobileInput", throwIfNotFound: true);
        m_MobileInput_TouchPosition = m_MobileInput.FindAction("TouchPosition", throwIfNotFound: true);
        m_MobileInput_DragStarted = m_MobileInput.FindAction("DragStarted", throwIfNotFound: true);
        // PcInput
        m_PcInput = asset.FindActionMap("PcInput", throwIfNotFound: true);
        m_PcInput_TouchPosition = m_PcInput.FindAction("TouchPosition", throwIfNotFound: true);
        m_PcInput_DragStarted = m_PcInput.FindAction("DragStarted", throwIfNotFound: true);
        m_PcInput_TouchContact = m_PcInput.FindAction("TouchContact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MobileInput
    private readonly InputActionMap m_MobileInput;
    private List<IMobileInputActions> m_MobileInputActionsCallbackInterfaces = new List<IMobileInputActions>();
    private readonly InputAction m_MobileInput_TouchPosition;
    private readonly InputAction m_MobileInput_DragStarted;
    public struct MobileInputActions
    {
        private @InputActions m_Wrapper;
        public MobileInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_MobileInput_TouchPosition;
        public InputAction @DragStarted => m_Wrapper.m_MobileInput_DragStarted;
        public InputActionMap Get() { return m_Wrapper.m_MobileInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileInputActions set) { return set.Get(); }
        public void AddCallbacks(IMobileInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileInputActionsCallbackInterfaces.Add(instance);
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @DragStarted.started += instance.OnDragStarted;
            @DragStarted.performed += instance.OnDragStarted;
            @DragStarted.canceled += instance.OnDragStarted;
        }

        private void UnregisterCallbacks(IMobileInputActions instance)
        {
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @DragStarted.started -= instance.OnDragStarted;
            @DragStarted.performed -= instance.OnDragStarted;
            @DragStarted.canceled -= instance.OnDragStarted;
        }

        public void RemoveCallbacks(IMobileInputActions instance)
        {
            if (m_Wrapper.m_MobileInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileInputActions @MobileInput => new MobileInputActions(this);

    // PcInput
    private readonly InputActionMap m_PcInput;
    private List<IPcInputActions> m_PcInputActionsCallbackInterfaces = new List<IPcInputActions>();
    private readonly InputAction m_PcInput_TouchPosition;
    private readonly InputAction m_PcInput_DragStarted;
    private readonly InputAction m_PcInput_TouchContact;
    public struct PcInputActions
    {
        private @InputActions m_Wrapper;
        public PcInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_PcInput_TouchPosition;
        public InputAction @DragStarted => m_Wrapper.m_PcInput_DragStarted;
        public InputAction @TouchContact => m_Wrapper.m_PcInput_TouchContact;
        public InputActionMap Get() { return m_Wrapper.m_PcInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PcInputActions set) { return set.Get(); }
        public void AddCallbacks(IPcInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PcInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PcInputActionsCallbackInterfaces.Add(instance);
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @DragStarted.started += instance.OnDragStarted;
            @DragStarted.performed += instance.OnDragStarted;
            @DragStarted.canceled += instance.OnDragStarted;
            @TouchContact.started += instance.OnTouchContact;
            @TouchContact.performed += instance.OnTouchContact;
            @TouchContact.canceled += instance.OnTouchContact;
        }

        private void UnregisterCallbacks(IPcInputActions instance)
        {
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @DragStarted.started -= instance.OnDragStarted;
            @DragStarted.performed -= instance.OnDragStarted;
            @DragStarted.canceled -= instance.OnDragStarted;
            @TouchContact.started -= instance.OnTouchContact;
            @TouchContact.performed -= instance.OnTouchContact;
            @TouchContact.canceled -= instance.OnTouchContact;
        }

        public void RemoveCallbacks(IPcInputActions instance)
        {
            if (m_Wrapper.m_PcInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPcInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PcInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PcInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PcInputActions @PcInput => new PcInputActions(this);
    public interface IMobileInputActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnDragStarted(InputAction.CallbackContext context);
    }
    public interface IPcInputActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnDragStarted(InputAction.CallbackContext context);
        void OnTouchContact(InputAction.CallbackContext context);
    }
}
